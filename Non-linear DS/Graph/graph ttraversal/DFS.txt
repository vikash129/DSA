Depth First Search or DFS for a Graph
===========

. Depth First Traversal (or Search) for a graph is similar to Depth First Traversal of a tree
. The only catch here is, that, unlike trees, graphs may contain cycles (a node may be visited twice)
. To avoid processing a node more than once, use a boolean visited array. A graph can have more than one DFS traversal.


. Depth-first search is an algorithm for traversing or searching tree or graph data structures
. The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as far as possible along each branch before backtracking
. So the basic idea is to start from the root or any arbitrary node and mark the node and move to the adjacent 
  unmarked node and continue this loop until there is no unmarked adjacent node 
  then backtrack and check for other unmarked nodes and traverse them. Finally, print the nodes in the path.


Follow the below steps to solve the problem:
============

. Create a recursive function that takes the index of the node and a visited array.
. Mark the current node as visited and print the node.
. Traverse all the adjacent and unmarked nodes and call the recursive function with the index of the adjacent node.



Applications of Depth First Search
================

1) Detecting cycle in a graph 
A graph has cycle if and only if we see a back edge during DFS
. So we can run DFS for the graph and check for back edges. (See this for details) 

2) Path Finding 
We can specialize the DFS algorithm to find a path between two given vertices u and z. 
i) Call DFS(G, u) with u as the start vertex. 
ii) Use a stack S to keep track of the path between the start vertex and the current vertex. 
iii) As soon as destination vertex z is encountered, return the path as the 
contents of the stack 


3) Topological Sorting 
Topological Sorting is mainly used for scheduling jobs from the given dependencies among jobs. In computer science, applications of this type arise in instruction scheduling, ordering of formula cell evaluation when recomputing formula values in spreadsheets, logic synthesis, determining the order of compilation tasks to perform in makefiles, data serialization, and resolving symbol dependencies in linkers [2]. 

4) To test if a graph is bipartite 
We can augment either BFS or DFS when we first discover a new vertex, color it opposite its parents, and for each other edge, check it doesnâ€™t link two vertices of the same color. The first vertex in any connected component can be red or black! See this for details. 

5) Finding Strongly Connected Components of a graph A directed graph is called strongly connected if there is a path from each vertex in the graph to every other vertex. (See this for DFS-based algo for finding Strongly Connected Components) 

6) Solving puzzles with only one solution, such as mazes. (DFS can be adapted to find all solutions to a maze by only including nodes on the current path in the visited set.) 